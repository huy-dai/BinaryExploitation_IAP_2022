
from functools import lru_cache
import ctypes
from Crypto.Util.number import bytes_to_long

input = b'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x2d\x00\x00\x00\xf4\x00\x00\x00\x8b\x01\x00\x00\x6a\x02\x00\x00\xb4\x02\x00\x00\x06\x03\x00\x00\x1f\x04\x00\x00\x40\x04\x00\x00\xce\x05\x00\x00\x00\x06\x00\x00\x3d\x06\x00\x00\x61\x06\x00\x00\xcb\x06\x00\x00\x21\x08\x00\x00\x37\x08\x00\x00\x80\x09\x00\x00\x1b\x0b\x00\x00\x2a\x0b\x00\x00\xdb\x0c\x00\x00\xcb\x0d\x00\x00\xaa\x0e\x00\x00\x4e\x10\x00\x00\x38\x11\x00\x00\xc4\x11\x00\x00\x1b\x12\x00\x00\xf8\x12\x00\x00\x77\x14\x00\x00\x9f\x15\x00\x00\x78\x16\x00\x00\xbd\x17\x00\x00\x1b\x19\x00\x00\xe3\x19\x00\x00\xce\x1a\x00\x00\x89\x1b\x00\x00'
print(len(input))

split = lambda str : [int.from_bytes(str[i:i+4],"little") for i in range(0, len(str), 4)] # Uses trick from : https://stackoverflow.com/questions/1887506/convert-python-byte-to-unsigned-8-bit-integer

parsed = split(input)

print(len(parsed))
print(parsed)

@lru_cache(None)
def magic(val):
    if val == 0:
        return 0x4d
    elif val == 1:
        return 0x49
    elif val == 2:
        return 0x54    
    return ctypes.c_ulonglong(magic(val-1)*5 + magic(val-2)*2 + magic(val-3)).value

out = []
for i in range(0x25):
    res = magic(parsed[i])
    print(res)
    out.append(res%256)

print(bytes(out))